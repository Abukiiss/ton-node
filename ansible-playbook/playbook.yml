#################################################
# Docker TON Node
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull default Docker image
      docker_image:
        name: "{{ default_container_image }}"
        source: pull
    - name: Create directory for tondb volume
      file:
        path: "{{ ton_db_folder }}"
        state: directory
        recurse: yes
    - name: Create directory for ton-archive volume
      file:
        path: "{{ ton_archive_folder }}"
        state: directory
        recurse: yes
    - name: Create volume ton-db
      docker_volume:
        name: "{{ ton_db_volume_name }}"
        driver_options:
          type: none
          device: "{{ ton_db_folder }}"
          o: bind
    - name: Create volume ton-archive
      docker_volume:
        name: "{{ ton_archive_volume_name }}"
        driver_options:
          type: none
          device: "{{ ton_archive_folder }}"
          o: bind
       
    - name: Create ton-node container
      docker_container:
        name: "{{ default_container_name }}"
        image: "{{ default_container_image }}"
        state: started
        restart_policy: unless-stopped
        env:
            GCONFURL: "{{ ton_config_url }}"
            PUBLIC_IP: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            CONSOLE_PORT: "{{ ton_console_port }}"
            LITE_SERVER: "{{ ton_lite_server}}"
            LITE_PORT: "{{ ton_lite_port }}"
        volumes:
          - "{{ ton_db_volume_name }}:/var/ton-work/db:rw"
          - "{{ ton_archive_volume_name }}:/var/ton-work/db/archive:rw"
        network_mode: host
    - name: Fetch client cert file
      fetch:
        src: "{{ ton_db_folder }}/client"
        dest: "certs/{{ inventory_hostname }}.client"
        flat: yes
    - name: Fetch server.pub file
      fetch:
        src: "{{ ton_db_folder}}/server.pub"
        dest: "certs/{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}.server.pub"
        flat: yes
